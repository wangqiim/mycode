int dp[502][51];    //'a'-'z' 0-25
int ne[51];   //evil的ne数组
string digit;   //s字符串
int str_n;  //s字符串的长度
string pat; //evil
int pat_n;  //evil的长度
int mod = 1000000007;

int dfs(int len,int match,bool limit){
    //len:当前处理的长度
    //match:第len位与模式串的match位比较,limit是否是边界
    if(len >= str_n) return 1;
    if(!limit && dp[len][match]) return dp[len][match];
    int cnt = 0;
    int up_bound = (limit?digit[len]-'a':'z'-'a');
    for(int i=0;i<=up_bound;i++){
        if(match==pat_n-1 && i==pat[match]-'a')
            continue;
        int now_match = match;
        while(i!=pat[now_match]-'a' && now_match!=0)
            now_match = ne[now_match];
        if(i==pat[now_match]-'a')    //第0位匹配上了
            cnt = (cnt+dfs(len+1,now_match+1,limit&&i==up_bound))%mod;
        else
            cnt = (cnt+dfs(len+1,now_match,limit&&i==up_bound))%mod;
    }
    if(!limit)
        dp[len][match] = cnt;
    return cnt;
}

class Solution {
public:
    int findGoodStrings(int n, string s1, string s2, string evil) {
        memset(dp,0,sizeof(dp));
        str_n = n;
        pat_n = evil.size();
        pat = evil;
        ne[0] = 0;
        ne[1] = 0;
        for(int i=1,j=0;i<pat_n;i++){
            while(evil[i]!=evil[j] && j!=0)
                j = ne[j];
            if(evil[i] == evil[j])
                ne[i+1] = ++j;
            else 
                ne[i+1] = 0;
        }//ne[0] = ne[1] = 0;
        digit = s1;
        int minn=dfs(0,0,true);
        digit = s2;
        int maxn=dfs(0,0,true);
        int flag = 1;
        for(int i=0,j=0;i<n;i++){
            while(s1[i]!=evil[j] && j!=0)
                j = ne[j];
            if(s1[i]==evil[j])
                j++;
            if(j==pat_n){
                flag = 0;//s1中有evil
                break;
            }
        }
        if(flag)    //s1没有evil
            return (maxn+mod-minn+1)%mod;
        else
            return (maxn+mod-minn)%mod;
    }
};
