class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        if(m==0||n==0) return max(m,n);
        vector<vector<int> > dp(m+1,vector<int>(n+1,0));
        //dp[i][j]表示word1的前i位和word2的前j位互相转换的最少操作数
        for(int i=1;i<=m;i++)   dp[i][0] = i;
        for(int j=1;j<=n;j++)   dp[0][j] = j;
        for(int i=1; i<=m; i++)
            for(int j=1; j<=n; j++){
                if(word1[i-1]==word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else{
                    dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + 1;
                    dp[i][j] = min(dp[i-1][j-1]+1,dp[i][j]);
                }
            }
        return dp[m][n];
    }
};