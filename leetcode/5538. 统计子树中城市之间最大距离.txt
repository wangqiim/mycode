class Solution {
public:
    vector<int> g[16];
    set<int> points;
    set<int> vis;
    int mx;


    void dfs(int fa, int rt) {
        for (int i = 0; i < g[rt].size(); i++) {
            if (points.count(g[rt][i]) && g[rt][i] != fa) {
                vis.insert(g[rt][i]);
                dfs(rt, g[rt][i]);
            }
        }
    }

    bool isConnected() {
        vis.clear();
        auto it = points.begin();
        vis.insert(*it);
        dfs(-1, *it);
        return vis.size() == points.size();
    }

    int dfs2(int fa, int rt) {    //返回深度
        int dep1 = 0;
        int dep2 = 0;
        for (int i = 0; i < g[rt].size(); i++) {
            if (points.count(g[rt][i]) && (g[rt][i] != fa)) {
                int d = dfs2(rt, g[rt][i]);
                if (d >= dep1) {
                    dep2 = dep1;
                    dep1 = d;
                } else if (d >= dep2) {
                    dep2 = d;
                }
            }
        }
        mx = max(mx, dep1 + dep2);
        return max(dep1, dep2) + 1;
    }

    vector<int> countSubgraphsForEachDiameter(int n, vector<vector<int>>& edges) {
        vector<int> ans(n - 1, 0);
        int m = edges.size();
        for (int i = 1; i <= m; i++) g[i].clear();
        for (int i = 0; i < m; i++) {
            g[edges[i][0]].push_back(edges[i][1]);
            g[edges[i][1]].push_back(edges[i][0]);
        }
        int bound = (1 << n) - 1;
        for (int sub = bound; sub; sub = (sub - 1) & bound) {
            points.clear();
            for (int i = 1; i <= n; i++) {
                if (((sub >> (i - 1))&1) == 1)
                    points.insert(i);
            }
            if (points.size() == 1) continue;
            if(!isConnected()) continue;
            mx = 0;
            dfs2(-1, *(points.begin()));
            ans[mx - 1]++;
        }
        return ans;
    }
};