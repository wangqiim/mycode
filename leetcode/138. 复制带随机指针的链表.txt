/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL)
            return NULL;
        Node *p1,*p2,*result;
        p1 = head;
        while(p1!=NULL){    //在每个结点之后插入一个复制的结点
            p2 = new Node(p1->val);
            p2->next = p1->next;
            p1->next = p2;
            p1 = p2->next;
        }
        
        p1 = head;
        while(p1!=NULL){
            if(p1->random!=NULL)
                p1->next->random = p1->random->next;
            else p1->next->random = NULL;
            p1 = p1->next->next;
        }
        
        p1 = head;
        p2 = head->next;
        result = head->next;
        while(p2->next!=NULL){
            p1->next = p2->next;
            p1 = p1->next; 
            p2->next = p1->next; 
            p2 = p2->next;   
        }
        p1->next = p2->next;
        return result;
    }
};