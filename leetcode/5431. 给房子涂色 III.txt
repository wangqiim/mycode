//dp[i][j][k] 第i个房子涂成j是第k个街区的花费
int dp[102][21][102];
const int inf = 1e8;

class Solution {
public:
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
         for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                for (int k = 0; k <= target; k++)     
                    dp[i][j][k] = inf;
        // i == 0
        if (houses[0] == 0)
            for (int j = 0; j < n; j++) 
                dp[0][j][1] = cost[0][j];
        else 
            dp[0][houses[0] - 1][1] = 0;
        
        for (int i = 1; i < m; i++) {   //2
            for (int j = 0; j < n; j++) {//2
                if (houses[i] == 0) //还未涂
                    for (int k = 1; k <= target; k++) { //1
                        for (int x = 0; x < n; x++) {   //前一个房子的颜色x
                            int spend = cost[i][j];
                            if (x == j) //和前一个房子颜色相同
                                dp[i][j][k] = min(dp[i][j][k], dp[i - 1][x][k] + spend);
                            else 
                                dp[i][j][k] = min(dp[i][j][k], dp[i - 1][x][k - 1] + spend);
                        }
                    }
                else {   //第i个已经涂了
                    if (houses[i] - 1 != j) continue;
                    for (int k = 1; k <= target; k++) {
                        for (int x = 0; x < n; x++)
                            if (x == j) //和前一个房子颜色相同
                                dp[i][j][k] = min(dp[i][j][k], dp[i - 1][x][k]);
                            else 
                                dp[i][j][k] = min(dp[i][j][k], dp[i - 1][x][k - 1]);
                    }
                } 
                    
            }
        }
            
        int ans = inf;
        for (int j = 0; j < n; j++)
            ans = min(ans, dp[m-1][j][target]);
        if (ans == inf)
            ans = -1;
        return ans;
    }
};