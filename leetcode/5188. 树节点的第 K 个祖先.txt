class TreeAncestor {
public:
    vector<vector<int> > f;
    vector<vector<int> > g;

    TreeAncestor(int n, vector<int>& parent) {
        f.clear();
        f = vector<vector<int> > (n, vector<int>(20, -1));
        g = vector<vector<int> > (n);
        int root;
        for (int i = 0; i < n; i++) {
            if (parent[i] == -1)
                root = i;
            else 
                g[parent[i]].push_back(i);
        }
        queue<int> q;
        q.push(root);
        while (!q.empty()) {
            int t = q.front();
            q.pop();
            int size = g[t].size();
            for (int i = 0; i < size; i++) {
                int u = g[t][i];
                f[u][0] = t;
                for (int j = 1; j < 20; j++) {
                    if (f[u][j - 1] == -1) break;
                        f[u][j] = f[f[u][j - 1]][(j - 1)];
                }
                q.push(u);
            }
        }
    }
    
    int getKthAncestor(int node, int k) {
        for (int i = 0; i < 20; i++) {
            if (node == -1) break;
            if ((k >> i) & 1)
                node = f[node][i];
        }
        return node;
    }
};

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor* obj = new TreeAncestor(n, parent);
 * int param_1 = obj->getKthAncestor(node,k);
 */