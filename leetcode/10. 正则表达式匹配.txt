class Solution {
public:
    bool isMatch(string s, string p) { //法一:动态规划
        //dp[i][j] s字符串的前i个和p字符串的前j个能匹配
        int m=s.size(),n=p.size();
        s = "-"+s+"-";
        p = "-"+p+"-";//控制i,j表示方便以及防止末尾索引溢出
        vector<vector<bool> > dp(m+1,vector<bool>(n+1,false));
        dp[0][0] = 1;
        for(int j=0;j<=n;j++){
            if(p[j]!='*') continue;
            dp[0][j] = dp[0][j-2];
        }//边界条件
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(p[j+1]=='*') continue;   //不会让j指向*的前一位
                if(p[j]!='*'){
                    if(dp[i-1][j-1]&&((s[i]==p[j])||p[j]=='.'))
                        dp[i][j] = true;
                    else dp[i][j] = false;
                }
                else{   //j位是*
                    if(s[i]==p[j-1]||p[j-1]=='.'){//s[i]与p[j-1]可以匹配
                        dp[i][j]=dp[i-1][j]||dp[i][j-2]; //可以与i匹配，也可以不匹配
                    }else{//s[i]与p[j-1]无法匹配
                        dp[i][j] = dp[i][j-2];
                    }
                }
            }
        }
        return dp[m][n];
    }
    /*
    bool isMatch(string s, string p) {  //法二:递归,参考剑指offer但是超时了
        s+='-';//添加-判断字符串结尾
        p+='-';
        return match(s,p);
    }

    bool match(string s,string p){
        if(s[0]=='-'&&p[0]=='-')
            return true;
        if(s[0]!='-'&&p[0]=='-')
            return false;
        if(p[1]=='*'){
            if(s[0]==p[0]||(p[0]=='.'&&s[0]!='-')){
                return match(s.substr(1),p.substr(2))||match(s.substr(1),p)||match(s,p.substr(2));
            }else{
                return match(s,p.substr(2));
            }
        }else if(s[0]==p[0]||(p[0]=='.'&&s[0]!='-')){
            return match(s.substr(1),p.substr(1));
        }
        return false;
    }*/
};