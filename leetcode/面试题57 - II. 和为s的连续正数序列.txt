class Solution {
public:
    vector<vector<int>> findContinuousSequence(int target) { //法一:前缀和+哈希
        vector<vector<int> > res;
        if(target == 1) return res;
        vector<int> nums; 
        map<long long,int> hashmap;
        long long acc = 0;
        hashmap[acc] = 1;
        for(int i=1;i<=target;i++){
            acc += i;
            int k = acc - target;
            if(hashmap.count(k)&&hashmap[k]<i){
                nums.clear();
                for(int j=hashmap[k];j<=i;j++)
                    nums.push_back(j);
                res.push_back(nums);
            }
            hashmap[acc]=i+1;
        }
        return res;
    }
};
/*
class Solution {
public:
    vector<vector<int>> findContinuousSequence(int target) {//法二:双指针滑动窗口
        vector<vector<int>> res;
        vector<int> nums;
        int i=1,j=2,s=3;
        nums.push_back(1);
        nums.push_back(2);  
        while(j<target){    //判断从[i~j]是否可以
            if(s==target){
                nums.clear();
                for(int k=i;k<=j;k++)
                    nums.push_back(k);
                res.push_back(nums);
                s-=i;
                i++;
            }
            while(s<target&&j<target){
                j++;
                s+=j;
            }
            while(s>target&&i<=j){
                s-=i;
                i++;
            }
        }
        return res;
    }
};*/