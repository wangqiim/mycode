const int maxn = 502;
const int inf = 1e8;
int dp[maxn][maxn]; //dp[i][j] nums1的前i个和nums2的前j个的最大点积

class Solution {
public:
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {  
        int n1 = nums1.size();
        int n2 = nums2.size();
        for (int i = 1; i <= n1; i++) {
            for (int j = 1; j <= n2; j++) {
                if(i == 1)
                    dp[i][j] = nums1[i - 1] * nums2[j - 1]; //i不匹配,匹配j
                else
                    dp[i][j] = max(dp[i - 1][j], nums1[i - 1] * nums2[j - 1] + max(0, dp[i - 1][j - 1])); //dp[i-1][j] 或 dp[i-1][j-1](i<->j)
                for (int k = 1; k < j; k++)
                    dp[i][j] = max(dp[i][j], nums1[i - 1] * nums2[k - 1] + max(0, dp[i -1][k - 1]));
            }
        }
        return dp[n1][n2];
    }
};