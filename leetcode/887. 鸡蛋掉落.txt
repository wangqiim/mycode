class Solution {
public:
    /*int superEggDrop(int K, int N) {
        //两个鸡蛋时候：设最优情况需要扔x次鸡,
        //则第一次鸡蛋扔在x位置碎了,第二个鸡蛋从1扔到x-1 一共 1+(x-1) = x次
        //如果第一次鸡蛋没碎，第二次扔在x+(x-1)位置碎了,则第二次从x+1扔到x+(x-1)-1，一共2+x-2=x次
        //因此 x+(x-1)+(x-2)...1 >=K
        //dp[k][N] = K个鸡蛋N层楼需要扔几次
        //dp[i][j] = (求最小值x=1~N)max(dp[i-1][x-1],dp[i][N-x])+1   //碎了，没碎
        vector<vector<int> > dp(K+1,vector<int>(N+1,0x7fffffff));
        for(int i=1;i<=K;i++){
            dp[i][1] = 1;
            dp[i][0] = 0;
        }
        for(int j=1;j<=N;j++)   
            dp[1][j] = j;
        for(int i=2;i<=K;i++){
            for(int j=2;j<=N;j++){
                for(int x=1;x<=j;x++){  //第一个鸡蛋可以扔在1-i层之间
                    dp[i][j]=min(dp[i][j],max(dp[i-1][x-1],dp[i][j-x])+1);
                } //超时
                //dp[i-1][x-1]递增,dp[i][j-x]递减,最大值一定是x使得2者最接近
                //用二分优化
            }
        }
        return dp[K][N]; 
    }*/
    vector<vector<int> > dp;
    int superEggDrop(int K, int N) {   //递归二分优化
        dp = vector<vector<int> >(K+1,vector<int>(N+1));
        for(int i=1;i<=K;i++)
            dp[i][1] = 1;
        for(int j=1;j<=N;j++) 
            dp[1][j] = j;
        return dfs(K,N); 
    }
    int dfs(int k,int n){
        if(dp[k][n] != 0) return dp[k][n];
        if(n==0) return 0;
        int lo = 1,hi = n;
        int ans = n;
        while(lo<hi){
            int mid = (hi+lo)/2;
            int left = dfs(k-1,mid-1);    //递增,碎了
            int right = dfs(k,n-mid);     //递减,没碎
            ans = min(ans,max(left,right)+1);
            if(left<right){
                lo = mid + 1;
            }else if(left>right){
                hi = mid;
            }else 
                break;
        }
        return dp[k][n] = ans;
    }

};