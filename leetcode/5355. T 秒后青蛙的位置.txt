
const int maxn = 101;

class Solution {
public:
    vector<int> edge[maxn]={};
    double dp[maxn][51]={}; //dp[i][j] 时间j时停在i点的概率
    void dfs(int now,int fa,int t){ //当前所在结点,父结点,当前时间
        int n = edge[now].size();
        int cnt = 0;
        for(int i=0;i<n;i++){
            if(fa == edge[now][i]) continue;
            cnt++;
        }
        if(cnt==0) dp[now][t] += dp[now][t-1];
        for(int i=0;i<n;i++){
            int v = edge[now][i];
            if(fa == v) continue;
            dp[v][t] += 1.0*dp[now][t-1]/cnt;
            dfs(v,now,t);
        }
        return ;
    }

    double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {
        int m = edges.size();
        for(int i=0;i<m;i++){
            edge[edges[i][0]].push_back(edges[i][1]);
            edge[edges[i][1]].push_back(edges[i][0]);
        }
        dp[1][0] = 1;
        int u = 1;
        for(int i=1;i<=t;i++){
            dfs(1,0,i);
        }
        return dp[target][t];
    }
};
