class Solution {
public:
    vector<int> inc;
    int first_hi_eq(int l,int r,int k){	//使用二分,返回inc数组[l~r]第一个大于等于k的位置
        int m;
        while(l<r){
            m = l+(r-l)/2;
            if(inc[m]==k)
                r = m;
            else if(inc[m]<k)
                l = m+1;
            else
                r = m;
        }
        return l;
    }

    int lengthOfLIS(vector<int>& nums) {
        int size = nums.size();
        if(size == 0)
            return 0;
        inc.push_back(nums[0]);
        for(int i=1;i<size;i++){
            if(nums[i]>inc.back())
                inc.push_back(nums[i]);
            else{
                int j = first_hi_eq(0,inc.size()-1,nums[i]);
                //找到inc[]中第一个>=nums[i]的元素的下标j
                inc[j]=nums[i]; 
            }
        }
        return inc.size();
    }
    /*
    int lengthOfLIS(vector<int>& nums) {    //最开始写的代码,复杂度O(n^2)
        int size = nums.size();
        vector<int> flag(size,INT_MAX);
        int i,j;
        for(i = 0;i<size;i++){
            for(j=0;j<size;j++)
                if(nums[i]<=flag[j]){
                    flag[j]=nums[i];
                    break;
                }
        }
        for(i = 0;i<size;i++){
            if(flag[i]==INT_MAX){
                break;                
            }
        }
        return i;
    }*/
	/*
    int lengthOfLIS(vector<int>& nums) {	//法二：动态规划
        int size = nums.size();
        if(size == 0)
            return 0;
        vector<int> dp(size);   //dp[i]表示以i结尾的最长上升子序列的长度
        dp[0] = 1;
        int res=1;
        for(int i=i+1;i<size;i++){
            dp[i] = 1;
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j])
                    dp[i] = max(dp[i],dp[j]+1);
            }
            res=max(res,dp[i]);
        }
        return res;
    }*/

};