const int maxn = 71;
int dp[maxn][maxn][maxn];

class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                for (int k = 0; k < col; k++)
                    dp[i][j][k] = -1;
        dp[0][0][col - 1] = grid[0][0] + grid[0][col - 1];
        for (int i = 0; i < row - 1; i++) {
            for (int j = 0; j < col; j++) 
                for (int k = 0; k < col; k++) {
                        if (dp[i][j][k] == -1) continue;
                        for (int dj = -1; dj <= 1; dj++)
                            for(int dk = -1; dk <= 1; dk++) {
                                int jj = j + dj, kk = k + dk;
                                if(jj < 0 || jj >= col || kk < 0 || kk >= col)
                                    continue;
                                if (jj == kk) {
                                    dp[i+1][jj][kk] = max(dp[i+1][jj][kk], dp[i][j][k] + grid[i+1][jj]);
                                } else {
                                    dp[i+1][jj][kk] = max(dp[i+1][jj][kk], dp[i][j][k] + grid[i+1][jj] + grid[i+1][kk]);
                                }
                            }
                }
        }
        int ans = 0;
        for (int j = 0; j < col; j++) 
            for (int k = 0; k < col; k++){
                ans = max(ans, dp[row-1][j][k]);
            }
        return ans;
    }
};